# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: tests

on:
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main", "development" ]

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi
        python -m pip install -e .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m pytest --cov=.
        cp .coverage .coverage.${{ matrix.python-version }}
    - name: upload coverage report
      uses: actions/upload-artifact@v1
      with:
          name: "coverage-data"
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    name: "Combine and check coverage"
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
      - name: "Set up Python"
        uses: "actions/setup-python@v4"
        with:
          python-version: "3.11"
      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade coverage[toml]
      - name: "Download coverage data"
        uses: actions/download-artifact@v3
        with:
          name: "coverage-data"
      - name: "Combine coverage and fail it itâ€™s under 100 %"
        run: |
          python -m coverage combine
          python -m coverage html --skip-covered --skip-empty
          # Report and write to summary.
          python -m coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
          # Report again and fail if under 100%.
          python -Im coverage report --fail-under=100
          # Generate coverage badge
          python -m coverage-badge -o coverage.svg
      - name: "Upload HTML report if check failed"
        uses: actions/upload-artifact@v3
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}
      - name: "Upload badge"
        uses: actions/upload-artifact@v3
        with:
          name: covbadge
          path: coverage.svg
